Daniele Bianchini Matr. 153087 Unimore 

Il primo esempio di polimorfismo nel progetto si può notare nell'implementazione del metodo toString nelle classi Spedizione e SpedAssicurata di cui si fa uso nella classe figlia di AbstractTableModel. In seguito alle  scelte di progetto effettuate, ossia di distinguere i vettori dei due tipi di spedizione, per questo metodo ho sfruttato solo la caratteristica di override del metodo, cioè all'invocazione dello stesso metodo si ottengono due comportamenti differenti a seconda dell'oggetto che lo ha invocato.
Tale metodo viene utilizzato per mostrare il valore di rimborso di una spedizione assicurata. 
Un maggiore contributo del polimorfismo è presente all'interno delle classi Frame (classe del frame di login), Tableframe e Adminframe (frame dove utente o admin gestiscono le spedizioni).
All'interno del metodo login di Frame, invocato alla pressione del corrispettivo JButton, viene sfruttata la regola di conformità: infatti l'attributo tframe di tipo Tableframe viene istanziato come oggetto Tableframe se a loggarsi è un cliente, mentre viene istanziato come  Adminframe se a loggarsi è l'amministratore, presentando ambienti di lavoro diversi.
Grazie alla caratteristica dell'introspezione favorita dal dispatching dinamico di java, per costruire la finestra dell'amministratore mi è bastato fare override dei metodi di caricamente delle spedizioni ( invece delle spedizioni di  un singolo cliente sono necessarie le spedizioni di tutti i clienti) quali caricasped() e caricaspedass() e del metodo fornito dall'interfaccia MouseListener per permettere al generico cliente di chiedere rimborso, mentre all'Admin di cancellare  spedizioni finite.
Il costruttore di questa ultima classe infatti semplicemente richima quella della classe padre con parametro la finestra che lo ha invocato e il "cliente statico" amministratore e automaticamente java a tempo di esecuzione cerca gli stessi metodi nella classe relativa all'oggetto chiamante. 

